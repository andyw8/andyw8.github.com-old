<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Andy Waite]]></title>
  <link href="http://andyw8.github.com/atom.xml" rel="self"/>
  <link href="http://andyw8.github.com/"/>
  <updated>2012-08-08T14:52:09+01:00</updated>
  <id>http://andyw8.github.com/</id>
  <author>
    <name><![CDATA[Andy Waite]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to easily delete a large Amazon S3 Bucket]]></title>
    <link href="http://andyw8.github.com/blog/2012/08/08/how-to-easily-delete-a-large-amazon-s3-bucket/"/>
    <updated>2012-08-08T14:32:00+01:00</updated>
    <id>http://andyw8.github.com/blog/2012/08/08/how-to-easily-delete-a-large-amazon-s3-bucket</id>
    <content type="html"><![CDATA[<p>I recently had to delete an S3 bucket containing over 200,000 objects. S3 prevents deletion of non-empty buckets, and deleting this many objects is virtually impossible using any GUI, and I had difficulty finding an reasonable API approach (support for [multi-object delete])(http://aws.amazon.com/about-aws/whats-new/2011/12/07/amazon-s3-announces-multi-object-delete/) still seems limited).</p>

<p>If you don&#8217;t mind waiting 24 hours for your bucket to be cleared, there&#8217;s a very simple solution:</p>

<ul>
<li>Log into the <a href="https://console.aws.amazon.com/s3/home">S3 Management Console</a></li>
<li>Select the bucket you want to clear</li>
<li>Select Properties from the toolbar</li>
<li>Click the Lifecycle tab in the Properties panel</li>
<li>Add a rule with no prefix and expiration of 1 day</li>
<li>Save the rule</li>
</ul>


<p>If you check back 24 hours later you should find all your objects have been deleted and you can delete the empty bucket.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[General Knowledge Domains for Every Developer]]></title>
    <link href="http://andyw8.github.com/blog/2012/07/12/general-knowledge-domains-for-every-developer/"/>
    <updated>2012-07-12T11:07:00+01:00</updated>
    <id>http://andyw8.github.com/blog/2012/07/12/general-knowledge-domains-for-every-developer</id>
    <content type="html"><![CDATA[<p>In almost every software project, developers will need to have some domain knowledge. This will either be something they have previously learned, or more commonly, knowledge they pick up during the project.</p>

<p>However, there are some domains which are so common that I believe every developer should have a fundamental understanding of them. This will help to avoid beginner mistakes.</p>

<h2>Money</h2>

<h2>Date &amp; Times</h2>

<h2>People, Culture, Language</h2>

<h2>Geography</h2>

<h2>Mathematics</h2>

<p>Set logic, boolean logic</p>

<h2>Legal</h2>

<h2>Statistics</h2>

<h2>Graphic Design</h2>

<p>Tufte?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 10 Development Books]]></title>
    <link href="http://andyw8.github.com/blog/2012/06/28/top-10-development-books/"/>
    <updated>2012-06-28T10:48:00+01:00</updated>
    <id>http://andyw8.github.com/blog/2012/06/28/top-10-development-books</id>
    <content type="html"><![CDATA[<p>Round education. Not language specific.</p>

<h2>1 Refactoring</h2>

<p>The original Refactoring book was in Java. This is almost just a re-write in Ruby, with a few changes. It&#8217;s authorised by the original author, Martin Fowler, and the layout is virtually identical.</p>

<p>Alternatives:</p>

<h2>Design patterns</h2>

<p>The original Design Patterns book is a heavy read.</p>

<p>Alternatives: Head First Design Patterns</p>

<h2>2 Clean Code, Robert Martin</h2>

<p>skp some parts:</p>

<h2>3 The Art of Agile, James Shore</h2>

<h2>Practical Object Oriented Design in Ruby</h2>

<p>Alternatives: Goose</p>

<h2>4 Clean coder / pass prog / prag prog</h2>

<p>It&#8217;s actually been a long time since I read The Pragmatic Programmer but it had a massive effect on me.</p>

<h2>5 Working Effectively with Legacy Code</h2>

<h2>Testing?</h2>

<h2>6 Continuous Delivery</h2>

<p>This book is like an encyclopedia of modern software process best practices.
7
Design Of Everyday Things</p>

<p>What&#8217;s missing?</p>

<p>Practical Object Oriented Programming in Ruby</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smoke Tests Are A Quick Win]]></title>
    <link href="http://andyw8.github.com/blog/2012/06/02/smoke-tests-are-a-quick-win/"/>
    <updated>2012-06-02T15:11:00+01:00</updated>
    <id>http://andyw8.github.com/blog/2012/06/02/smoke-tests-are-a-quick-win</id>
    <content type="html"><![CDATA[<p>It can be difficult to know where to start when adding automated integration tests to a legacy app. One of the easiest ways to get started an add value to your tests is with a smoke test.</p>

<p>You can often have a situation where all the project&#8217;s unit tests are passing, but something else is causes a breakage.</p>

<p>The smoke test should be part of your continous integration build, and be triggered once your core build job passes successfully (i.e. the code compiles and the unit tests pass). You may also want to run them periodically.</p>

<p>The smoke tests should run very quickly in order to give rapid feedback. Aim for under 60 seconds.</p>

<p>The most basic should simply verify that the core areas of your site load successfully. By successfully, I just mean that the server runs an HTTP status code in the 200 range.</p>

<p>A good way to identify on which pages to check is to look at your routes configuration. The most likely pages you&#8217;ll want to check will be &#8216;index&#8217; and &#8216;show&#8217; pages. Test pages which modify date will probably be a bit more involved.</p>

<p>If you use Capybara then this very easy. Just call #visit, since Capybara&#8217;s default behaviour is to raise and exception for a 400 or 500 status code.</p>

<p>Other things you can easily do in the smoke tests are:</p>

<p>Your smoke tests should be triggered automatically once your build passes.</p>

<ul>
<li>Verify that the page is valid HTML</li>
<li>Verify there are no broken images, missing JavaScript, or CSS files</li>
<li>Verify that some basic text content appears on the page</li>
</ul>


<hr />

<p>Feature: Smoke tests</p>

<p>  Scenario Outline:</p>

<pre><code>When I visit the &lt;page&gt; page
Then the page load should succeed
</code></pre>

<ul>
<li>if a page return a non-2xx status code, an error will be thrown</li>
</ul>


<p>Tie this into your Continous Integration system.</p>

<p>Can also run it on a scheduled basis. This can be useful if your app has a high number of dependencies which may change from underneath your feet.</p>

<p>Can run against all environments.</p>

<p>If a tester, your boss, or a customer gets a broken page, you looks like an idiot. There&#8217;s no excuse.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion App Template]]></title>
    <link href="http://andyw8.github.com/blog/2012/05/28/rubymotion-app-template/"/>
    <updated>2012-05-28T22:17:00+01:00</updated>
    <id>http://andyw8.github.com/blog/2012/05/28/rubymotion-app-template</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been trying out <a href="http://www.rubymotion.com/">RubyMotion</a> lately, and I&#8217;ve created a simple template project with some sensible defaults to make it quick and easy to start a new app:</p>

<ul>
<li>Folders for models, views, controllers and vendored frameworks to encourage a Rails-esque layout convention</li>
<li>Spec folder layout to mirror the app folder</li>
<li>Support for <a href="http://www.rubymotion.com/developer-center/articles/testflight/">TestFlight</a></li>
<li>Support for <a href="http://www.rubymotion.com/developer-center/articles/cocoapods/">CocoaPods</a></li>
<li>Default values for app version and identifier</li>
<li>Placeholders for configuring icons and device families</li>
</ul>


<p>You can find it at <a href="https://github.com/andyw8/rubymotion_app_template">github.com/andyw8/rubymotion_app_template</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post With Octopress]]></title>
    <link href="http://andyw8.github.com/blog/2012/04/18/first-post-with-octopress/"/>
    <updated>2012-04-18T23:37:00+01:00</updated>
    <id>http://andyw8.github.com/blog/2012/04/18/first-post-with-octopress</id>
    <content type="html"><![CDATA[<p>Hello world!</p>
]]></content>
  </entry>
  
</feed>
