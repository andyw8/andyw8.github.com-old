<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Andy Waite]]></title>
  <link href="http://andyw8.github.com/atom.xml" rel="self"/>
  <link href="http://andyw8.github.com/"/>
  <updated>2014-03-19T13:39:03+00:00</updated>
  <id>http://andyw8.github.com/</id>
  <author>
    <name><![CDATA[Andy Waite]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[Coding Offline]]></title>
<link href="http://andyw8.github.com/2014/03/12/coding-offline/"/>
<updated>2014-03-12T11:02:00+00:00</updated>
<id>http://andyw8.github.com/2014/03/12/coding-offline</id>

      <content type="html"><![CDATA[<p>Looking things up online while coding is now so common that we take it for granted. Need to check the parameters for that method call? Just Google it. How do you configure that library? Check the README on GitHub. What does that obscure error mean? Look it up on StackOverflow, someone else has probably already solved it.</p>

<p>But there will times when you want to code, and you don&#8217;t have an Internet connection. You might be on a 14-hour plane trip. What a great way to do some coding without distractions. But then will discover there&#8217;s some critical piece of documentation you need, and you can&#8217;t make any progress without it.</p>

<p>The next day, you might go to a local coffee shop, and make use of their WiFi. But you soon discover it&#8217;s slow and unreliable. You return to your hotel, and discover there&#8217;s a huge surcharge for in-room WiFi, probably priced at business travellers with expense accounts.</p>

<p>So in desperation you buy a local SIM card, add some credit, and tether your phone to your laptop. But you discover the 3G network doesn&#8217;t have good coverage in the part of town you&#8217;re in. Web pages keep timing out causing you frustration.</p>

<p>But it doesn&#8217;t have to be this way. In this post, I&#8217;ll show some practical tools and techniques to turn coding offline into a viable practice. Even if the above situations don&#8217;t apply to you, it&#8217;s can sometimes be good to disconnect on purpose to avoid all the interruptions and distractions that being online brings.</p>

<h1>Dash</h1>

<p><a href="http://kapeli.com/dash">Dash</a> is a paid app published by Kapeli which lets you download documentation for offline use. It&#8217;s US$19.99 but can occasionally be found at a discount. It&#8217;s covers virtually every language and framework you might want refer to, and the content is updated automatically.</p>

<h1>Dependency Management Tools</h1>

<p>A dependency manager such as Bundler or npm will download all the libraries your projects needs, based on a manifest file. If you add a dependency, it will need to fetch that from the Internet, unless it&#8217;s already on your system (and is at the correct version number).</p>

<p>You&#8217;ll probably find that most dependencies are added or changed near the beginning of a project, and that changes become less frequent over time. So this is a case where preparing beforehand is key, while you still have a fast Internet connection. If you&#8217;re beginning a new project, start by building a minimal feature that touches all layers of the system, so that you can discover any missing dependencies.</p>

<p>Once you have the dependencies installed, you may need to refer to their documentation. People tend to jump straight to the project&#8217;s web site, but all the documentation is usually already contained with the packages you&#8217;ve downloaded. For example, if you&#8217;re using Ruby you can simply run <code>yard server -G Gemfile</code> within your project, then visit http://0.0.0.0:8808 to browse it.</p>

<h1>Distributed Version Control</h1>

<p>We take it for granted, but Git is a huge help when working offline. Older systems such as Subversion require a connection to a server to view a file&#8217;s history, or create a new branch. When you clone a Git repo, you&#8217;ll have the full history of every change that&#8217;s been made.</p>

<p>Feature branches are particularly useful. If you get stuck on a problem due to not being online, you can commit what you&#8217;ve have so far, then check out a separate branch from master to work on something else.</p>

<h1>Books</h1>

<p>I use to have a fairly large collection of paper books, but I&#8217;ve given that up now for the convenience of having everything just a click away.</p>

<p>While technology-based books do tend to be become outdated fairly quick, they can be a useful addition or replacement for the standard documentation.</p>

<p>I&#8217;m a big fan of companies which allow you to download their books in mulitple formats (usually PDF, epub and mobi), without DRM. This includes Pragmatic Programmers, Leanpub, Manning and O&#8217;Reilly.</p>

<p>I store my eBooks in Dropbox, and use GoodReader to keep them in sync with my iPad. I prefer to read PDF versions on the iPad since it preserves the author&#8217;s intended layout. Code samples can be difficult to read on a Kindle.</p>

<p>eBooks don&#8217;t take up much disk space, so you carry every book you own without having to be concerned about disk space.</p>

<h1>Email</h1>

<p>If you&#8217;re working on a project with other people, you might need to refer to information contained in emails. Unfortunately web-based mail such as GMail are no use when offline. So consider using a native email client which can download and store all your mail offline, such as Apple&#8217;s Mail app for Mac.</p>

<p>Even if you have many years of email, it shouldn&#8217;t take up too much space as long as you periodically prune any mail with large attachments. I have around five years of mail in GMail which consumes only around 3GB.</p>

<h1>StackOverflow</h1>

<p>StackOverflow has become indispensible to many developers. The entire question and answer database is available under a Creative Commons license on <a href="https://archive.org/details/stackexchange">The Internet Archive</a>.</p>

<p>The raw data probably isn&#8217;t much use, so check out <a href="http://stackstash.com/">StackStash</a> (US$1.99), an iOS app which allows browsing of the entire StackOverflow site offline.</p>

<h1>Evernote</h1>

<p>I love Evernote for keeping notes organised, but one of its most useful features is the Web Clipper. Whenever I look-up something which I think I might need to refer to later, I clip the page into Evernote. This allows me to view it offline, with all formatting intact. It&#8217;s indexed by Evernote so I can easily find what I&#8217;m looking for, even within thousands of notes.</p>

<p>I also recommend maintaining &#8216;cheat sheets&#8217; of common commands you use, or things you have trouble remembering without Googling them.</p>

<h1>Video Content</h1>

<p>I&#8217;m a big fan of screencast tutorial sites such as Railscasts and Codeschool. These can be streamed online but I like to have them available to refer to offline.</p>

<p>Videos can take up a lot of space, so you may want not want to fill up your drive, especially if you&#8217;re using an SSD with limited storage.</p>

<p>Instead, store the videos on a secondary device whch you can carry with you. A 128GB flash drive or card can be bought for around US$60. If you want more space, a portable 2TB USB hard drive is only around $100, and sturdy enough to carry around in your bag.</p>

<p><strong>Did you find this post useful? I&#8217;m writing a <a href="https://leanpub.com/travel-tech">book on Travel Technology</a>. Sign up to learn more.</strong></p>
<p><a rel="bookmark" href="http://andyw8.github.com/2014/03/12/coding-offline/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Prevent accidents with rm and rmdir]]></title>
<link href="http://andyw8.github.com/2014/03/02/prevent-accidents-with-rm-and-rmdir/"/>
<updated>2014-03-02T15:10:00+00:00</updated>
<id>http://andyw8.github.com/2014/03/02/prevent-accidents-with-rm-and-rmdir</id>

      <content type="html"><![CDATA[<p>Many of us learned the hard way that <code>rm</code> and <code>rmdir</code> are unforgiving. There&#8217;s no Trash to recover from, and there&#8217;s no undo.</p>

<p>There are <a href="http://www.quora.com/Linux/What-are-some-crazy-rm-rf-stories-you-have-heard-about">many legendary stories</a> involving <code>rm -rf</code> disasters.</p>

<p>In time you learn to be wary of using those commands, but once in a while you&#8217;ll screw up and delete something you shouldn&#8217;t have.</p>

<p>There are a few articles about how to alter the behaviour of <code>rm</code> so that it moves to the trash instead of permanently deleting. But this is dangerous if you happen to be using a different machine which doesn&#8217;t have this behaviour enabled.</p>

<p>A better option is to install <a href="http://www.nightproductions.net/cli.htm">rmtrash</a> (also available via Homebrew). The <code>rmtrash</code> command can be use to delete both files and directories, and as the name suggests it moves the files to the Trash instead of parmanently deleting them.</p>

<p>If you really need to call <code>rm</code> or <code>rmdir</code> then just provide the full path, e.g. <code>/bin/rm</code> or <code>/bin/rmdir</code>.</p>

<p>You can then alias the actual <code>rm</code> commands to give you a reminder warning, for example add this to your <code>.bashrc</code>:</p>

<pre><code>alias rm="echo 'Use rmtrash, or full path name for rm'"
alias rmdir="echo 'Use rmtrash, or full path name for rmdir'"
</code></pre>

<p>Over time this should get you into the habit of typing <code>rmtrash</code>.</p>

<p>This change might cause problems with shell scripts which use <code>rm</code>. I&#8217;m not really sure how to deal with that. It may be sensible for the alias to return false to indicate the command failed.</p>

<p>Reference: <a href="http://apple.stackexchange.com/a/17637">Apple StackExchange post</a></p>
<p><a rel="bookmark" href="http://andyw8.github.com/2014/03/02/prevent-accidents-with-rm-and-rmdir/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[TableXI, Chicago]]></title>
<link href="http://andyw8.github.com/2013/11/20/tablexi-chicago/"/>
<updated>2013-11-20T20:04:00+00:00</updated>
<id>http://andyw8.github.com/2013/11/20/tablexi-chicago</id>

      <content type="html"><![CDATA[<p><a href="http://www.tablexi.com/">TableXI</a> are based in a spacious loft-style office in the West Loop area of Chicago. The place has lots of nice touches highlighting the history and culture of the company, such as the recreation of their logo using just pins and string:</p>

<p><img src="http://i.imgur.com/1Rl22dv.jpg" alt="Logo" /></p>

<p>The coolest time to visit must be summer, when they run their own rooftop cinema on top the building!</p>

<p>The office design includes a professional kitchen. A chef cooks the team lunch each day, which encourages everyone to spend time together.</p>

<p><img src="http://i.imgur.com/4j3MAS4.jpg" alt="Kitchen" /></p>

<p>They&#8217;re very supportive of the Chicago software development community, and sponsor or host many events:</p>

<p><img src="http://i.imgur.com/VmcBK4o.jpg" alt="Chalkboard" /></p>

<p>They often have guests working in the office, so today I was grateful to pair with <a href="http://twitter.com/theotherzach">Zack Briggs</a> of <a href="http://www.testdouble.com/">Test Double</a>. He was working on a Chrome plugin using Angular.js for measuring JavaScript performance.</p>

<p>Below is a bunch of miscellaneous notes, observations and links from today:</p>

<ul>
<li><a href="http://www.amazon.com/dp/B0083I7Y8W">Logitech Conference Cam</a></li>
<li><a href="http://lodash.com/">Lo-Dash</a> is a Underscore.js replacement, with benefits including faster performance</li>
<li>Backbone tends to be significantly slower than Angular or Ember - you can see this on the <a href="http://todomvc.com/">TodoMVC</a> site after adding about 30 items.</li>
<li>Angular&#8217;s use of additional attributes may feel awkward at first, but it means there&#8217;s almost never a need to add IDs or classes solely for behaviour</li>
<li>Angular&#8217;s <code>ng-repeat</code> makes dealing with collections much cleaner than using subviews</li>
<li>The use of the pipe character (|) in Angular seems slightly odd at first - <a href="http://stackoverflow.com/questions/15223447/syntax-for-ng-repeat-angular-directive-and-pipe-character">StackOverflow post</a></li>
<li><a href="http://backbonejs.org/docs/backbone.html">Backbone.js has nicely annoted source</a></li>
<li>NPM solves the problem of competing dependencies by having multiple copies of a dependant library. Rather different from RubyGems.</li>
<li>Sometimes code can be &#8220;so DRY that it&#8217;s chafing&#8221;</li>
<li><a href="http://devbootcamp.com/">Dev Bootcamp</a>, another Chicago company.</li>
<li><a href="http://stackoverflow.com/questions/16823746/backbone-js-listento-vs-on">Backbone.js: .listenTo vs .on</a> to avoid phantom views</li>
<li><a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a> can be a useful sandbox if you&#8217;re building an extension and don&#8217;t want to mess up your main browser</li>
<li><a href="http://www.alfredapp.com/">Alfred</a>, an alternative to QuickSilver, LaunchBar, etc.</li>
<li><a href="http://www.youtube.com/watch?v=yuh9COzp5vo">An Intervention for ActiveRecord</a></li>
<li>Some recommended Destroy All Software episodes covering VIM and shell: <a href="https://www.destroyallsoftware.com/screencasts/catalog/processes-and-jobs">Processes and Jobs</a>, <a href="https://www.destroyallsoftware.com/screencasts/catalog/file-navigation-in-vim">File Navigation in Vim</a>, <a href="https://www.destroyallsoftware.com/screencasts/catalog/the-vimrc">The .vimrc</a></li>
<li>All the Vim you need to get started and be productive can easily fit on an index card</li>
<li>I knew some of the common Bash keyboard shortcuts, but I never realised they were inspired by emacs. You can also set bash to use vi mode.</li>
<li><a href="http://www.confreaks.com/videos/364-gogaruco2010-workflow">Golden Gate Ruby Conference 2010 - Workflow - Ryan Davis</a></li>
<li><a href="http://www.confreaks.com/videos/2427-railsconf2013-nobody-will-train-you-but-you">Nobody will train you but you</a> - Zach&#8217;s talk from RailsConf 2013</li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh">Oh My ZSH</a></li>
<li>Consider setting your shell prompt to indicate a dirty index or untracked files (see <a href="http://stackoverflow.com/questions/2657935/checking-for-a-dirty-index-or-untracked-files-with-git">this StackOverflow post</a>)</li>
<li>When you set a breakpoint in JavaScript, you can hover over variables to see their current state</li>
<li>When your pair with someone, you often learn more about improving your workflow than improving your coding</li>
</ul>

<p><a rel="bookmark" href="http://andyw8.github.com/2013/11/20/tablexi-chicago/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[8th Light, Chicago]]></title>
<link href="http://andyw8.github.com/2013/11/19/8th-light-chicago/"/>
<updated>2013-11-19T16:17:00+00:00</updated>
<id>http://andyw8.github.com/2013/11/19/8th-light-chicago</id>

      <content type="html"><![CDATA[<p>Placeholder, write-up coming soon.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2013/11/19/8th-light-chicago/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Hashrocket, Chicago]]></title>
<link href="http://andyw8.github.com/2013/11/18/hashrocket-chicago/"/>
<updated>2013-11-18T16:17:00+00:00</updated>
<id>http://andyw8.github.com/2013/11/18/hashrocket-chicago</id>

      <content type="html"><![CDATA[<p>Placeholder, write-up coming soon.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2013/11/18/hashrocket-chicago/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[RubyConf 2013, Miami Beach]]></title>
<link href="http://andyw8.github.com/2013/11/13/rubyconf-2013-miami-beach/"/>
<updated>2013-11-13T14:45:00+00:00</updated>
<id>http://andyw8.github.com/2013/11/13/rubyconf-2013-miami-beach</id>

      <content type="html"><![CDATA[<p>Placeholder, write-up coming soon.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2013/11/13/rubyconf-2013-miami-beach/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Pivotal Labs, New York City]]></title>
<link href="http://andyw8.github.com/2013/11/06/pivotal-labs-new-york-city/"/>
<updated>2013-11-06T13:58:00+00:00</updated>
<id>http://andyw8.github.com/2013/11/06/pivotal-labs-new-york-city</id>

      <content type="html"><![CDATA[<p>Placeholder, write-up coming soon.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2013/11/06/pivotal-labs-new-york-city/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Thoughtbot, Boston]]></title>
<link href="http://andyw8.github.com/2013/11/02/thoughtbot-boston/"/>
<updated>2013-11-02T07:39:00+00:00</updated>
<id>http://andyw8.github.com/2013/11/02/thoughtbot-boston</id>

      <content type="html"><![CDATA[<p>Thoughtbot&#8217;s office is next to the scenic <a href="http://en.wikipedia.org/wiki/Boston_Common">Boston Common</a>, and was just a short walk from my hotel.</p>

<p>I first met with Anna, Thoughtbot&#8217;s office manager, who gave me quick tour and introduced me to <a href="https://twitter.com/joshuaclayton">Josh Clayton</a>, one of Thoughtbot&#8217;s managing directors. Coincidentally I&#8217;d just heard Josh speaking on the <a href="http://podcasts.thoughtbot.com/giantrobots">Giant Robots podcast</a> while I was on the flight over.</p>

<p>Josh had been working on a feature for <a href="http://github.com/thoughtbot/factory_girl">factory_girl</a>, a testing library which I was already familiar with. The <code>create_list</code> method can sometimes be abused, so they&#8217;ve decided to add a <code>create_pair</code> method to encourage people to only create a minimal number of test objects. We talked about the best way to test this against the various build strategies and shortly later committed <a href="https://github.com/thoughtbot/factory_girl/commit/b9e1dde7e8bb4497a711487641e751a310fdf996">b9e1dd</a>. A great start to the day!</p>

<p>Next up was the daily standup. It&#8217;s pretty fast-paced, with about 30 developers involved. Fridays are usually reserved for working on open source projects, or learning a new technology, kind of a &#8216;20% time&#8217;.</p>

<p>I then paired with <a href="https://twitter.com/joelquen">Joel Quenneville</a>, building a basic Ember.js app from scratch, without involving any Rails stuff. We had quite a few &#8220;Ok, this works, but it shouldn&#8217;t work!&#8221; moments, and overall we both discovered a few new things about Ember.</p>

<p>Lunch at Thoughtbot is catered in-office on Fridays, so I got to meet a few more of the team.</p>

<p>After lunch I paired a bit more with Joel, adding ember-data, and then with <a href="https://twitter.com/TonyD256">Tony DiPasquale</a> on some iOS code for <a href="https://github.com/tonyd256/TDAudioPlayer">TDAudioPlayer</a>. It was interesting to see all the improvements to Objective-C and XCode since I last used it (I tend to use RubyMotion).</p>

<p>Friday afternoons at Thoughtbot ends with a round-table tech discussion. The topic this week was Rails engines, which I&#8217;ve used but aren&#8217;t deeply familiar with, but it was interesting to hear the lively argued discussion.</p>

<p>I met <a href="https://twitter.com/r00k">Ben Orenstein</a> who I knew of through the Giant Robots podcast and his conferences talks.</p>

<p>The day finished with drinks and dinner at some local bars.</p>

<p>Overall, a great start to my tour! Thanks to everyone at Thoughtbot for being so welcoming.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2013/11/02/thoughtbot-boston/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[The Coding Tour Begins]]></title>
<link href="http://andyw8.github.com/2013/10/31/the-coding-tour-begins/"/>
<updated>2013-10-31T23:45:00+00:00</updated>
<id>http://andyw8.github.com/2013/10/31/the-coding-tour-begins</id>

      <content type="html"><![CDATA[<p>So after the past several months of planning, and a few hectic weeks of moving out out of my apartment, I&#8217;ve at last set off on my World Coding Tour. I&#8217;m writing this from a hotel room in Boston, where I&#8217;ll be visiting <a href="http://thoughtbot.com/">ThoughtBot</a> tomorrow.</p>

<p>I&#8217;ve had an awesome and enthusiastic response to the tour, and I&#8217;m grateful to everyone who&#8217;s helped spread the word, especially Corey Haines and Avdi Grimm, who helped to spread the word. I&#8217;ve had offers from all over the US. Rather than try to arrange every date up front, I&#8217;m going to schedule as I go. RubyConf is coming up this weekend, so that should be a good opportunity to find some companies to visit.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2013/10/31/the-coding-tour-begins/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Promoting my Coding Tour]]></title>
<link href="http://andyw8.github.com/2013/09/17/promoting-my-coding-world-tour/"/>
<updated>2013-09-17T22:51:00+01:00</updated>
<id>http://andyw8.github.com/2013/09/17/promoting-my-coding-world-tour</id>

      <content type="html"><![CDATA[<h2>Previous Post: <a href="http://blog.andywaite.com/2013/09/14/coding-world-tour/">My Coding World Tour</a></h2>

<p>I announced plans for my Coding World Tour in a <a href="http://blog.andywaite.com/2013/09/14/coding-world-tour/">previous blog post</a>. The next challenge is to make sure people know about it.</p>

<p>Other than a couple of posts on Twitter and a share on LinkedIn, I haven&#8217;t yet done much promotion. This post describes my next steps for spreading the word.</p>

<h2>Personal Network</h2>

<p>I know a handful of people in some of the cities on my list, so I&#8217;ll be asking them to share my post with their local contacts.</p>

<h2> Regional User Groups</h2>

<p>Every city I plan to visit has a least one Ruby or Rails user group. I think these will probably be my best bet for finding coding opportunities:</p>

<ul>
<li>New York City: <a href="http://www.meetup.com/NYC-rb/">NYC.rb</a></li>
<li>Boston: <a href="http://bostonrb.org/">Boston Ruby Group</a></li>
<li>Chicago: <a href="http://www.chicagoruby.org/">ChicagoRuby</a></li>
<li>Seattle: <a href="http://www.seattlerb.org/">Seattle.rb</a></li>
<li>Portland: <a href="http://pdxruby.org/">Portland Ruby Brigade</a></li>
<li>Atlanta: <a href="http://www.atlrug.com/">Atlanta Ruby Users Group</a></li>
<li>Dallas: <a href="http://www.dallasrb.org/">Dallas Ruby Brigade</a></li>
<li>Austin <a href="http://austinonrails.org/">Auston On Rails</a>, <a href="http://austinrb.org/">Austin.rb</a></li>
<li>Toronto: <a href="http://www.meetup.com/torontoruby/">Toronto Ruby Brigade</a>, <a href="https://groups.google.com/forum/#!forum/ruby-toronto">ruby-toronto</a></li>
<li>San Francisco: <a href="http://www.meetup.com/sfruby/">San Francisco Ruby Meetup Group</a>, <a href="http://www.meetup.com/SFRails/">SF Rails</a></li>
</ul>


<p>It might seem wrong to focus on Ruby, but it has an incredible community. Also, many Ruby developers are polyglot programmers, so it may lead to a chance of exploring other languages.</p>

<h2>Ruby Forums</h2>

<p>These forums are full of enthusiastic developers:</p>

<ul>
<li><a href="http://parley.rubyrogues.com/">Ruby Rogues Parley</a></li>
<li>ThoughtBot Prime forum</li>
</ul>


<h2>Individual Companies</h2>

<p>There are a number of companies I admire who I&#8217;d like to spend a few days with, so I may approach them directly, but I&#8217;m going to hold off and see what offers I get first.</p>

<h2>Other Publications</h2>

<p>These would be harder to get a mention on, but would be great publicity:</p>

<ul>
<li><a href="http://ruby5.envylabs.com/">Ruby5 podcast</a></li>
<li><a href="http://rubyrogues.com/">RubyRogues podcast</a></li>
<li><a href="http://rubyweekly.com/">RubyWeekly</a></li>
</ul>

<p><a rel="bookmark" href="http://andyw8.github.com/2013/09/17/promoting-my-coding-world-tour/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[My Coding World Tour]]></title>
<link href="http://andyw8.github.com/2013/09/14/coding-world-tour/"/>
<updated>2013-09-14T16:25:00+01:00</updated>
<id>http://andyw8.github.com/2013/09/14/coding-world-tour</id>

      <content type="html"><![CDATA[<p>In the culinary world, a <a href="http://en.wikipedia.org/wiki/Stage_%28cooking%29"><em>stage</em></a> (pronounced <em>stazhje</em>, from the French <em>stagiaire</em>) is an unpaid internship when a cook or chef works briefly, for free, in another chef&#8217;s kitchen to learn and be exposed to new techniques and cuisines.</p>

<p>To improve as a developer, I want to try this approach in the software world. At the end of October I will be leaving London, my home for the past six years, buying a Round-The-World plane ticket, and visiting North America, South East Asia, and Europe. During that time, I&#8217;ll be seeking out opportunities for a number of short coding internships at development companies.</p>

<h2>Why I&#8217;m Doing This</h2>

<blockquote><p>&#8220;Every day, work to refine the skills you have and to add new tools to your repertoire. Over the years, you&#8217;ll be amazed at how your experience has blossomed and your skills have grown.&#8221; &#8211; The Pragmatic Programmer, Andrew Hunt and Dave Thomas</p>

<p>&#8220;Be the worst guy in every band you’re in. The people around you affect your own performance. Choose your crowd wisely.&#8221; &#8211; The Passionate Programmer, Chad Fowler</p></blockquote>

<p>I want this experience to give me new perspectives on being a developer, to discover new concepts and techniques, and most importantly improve by <a href="http://codeulate.com/2013/08/how-to-improve-as-a-programmer">learning from others</a>.</p>

<p>For the past few years I&#8217;ve worked as a contractor for a variety of companies in London, and I found that one of the most interesting aspects is the initial period of joining a team and discovering how each organisation approaches development differently. This phase is always when I learn most and re-think my opinions on the best way to build software. There&#8217;s always a suprising amount of innovation under the covers.</p>

<p>There&#8217;s also, of course, the benefits of travel &#8211; discovering new cities, meeting new people, and building my professional network.</p>

<p>I&#8217;ve been inspired by reading about <a href="http://programmingtour.blogspot.com">Corey Haines&#8217; Journeyman pair-programming tour</a>, although my travels won&#8217;t be quite as extensive as I&#8217;ll be alternating with working on my own projects while travelling.</p>

<h2>What You Get Out Of It</h2>

<p>Probably the biggest benefit is a fresh set of eyes on your team&#8217;s code and your process. So it&#8217;s like <a href="http://www.pairprogramwith.me/">#pairwithme</a> but in real life!</p>

<p>I&#8217;ve worked on many types of apps including mobile, APIs, e-commerce, social networks and gaming, each of which have taught me useful lessons that I can share.</p>

<p>I will be aiming to blog about the companies I visit (if given consent), so it&#8217;s also an opportunity to raise the profile of your workplace to an audience of developers.</p>

<h2>About Me</h2>

<p>I&#8217;ve been a contract Ruby developer for the past three years, with a bit of JavaScript and iOS development too. I would put my skill level at between mid-level and senior. I&#8217;m a proponent of test-driven development, simple design, clean code, refactoring and pair programming.</p>

<p>My most popular open source project is <a href="https://github.com/andyw8/rubymotion_generators">RubyMotion Generators</a>, as featured in some episodes of <a href="http://motioncasts.tv/">motioncasts.tv</a>. I&#8217;m hoping to get <a href="https://github.com/rails/rails/pull/10471">my first Rails contribution</a> accepted soon!</p>

<p>My side-projects include:</p>

<ul>
<li><a href="https://itunes.apple.com/gb/app/streetfood-london/id589405547?mt=8">StreetFood London</a></li>
<li><a href="http://techradar.io">techradar.io</a> (under development)</li>
<li>Confreaks iOS app (under development)</li>
</ul>


<p>I also coach a few aspiring developers via <a href="http://www.railsmentors.org">RailsMentors</a></p>

<p>Around the web:</p>

<ul>
<li><a href="http://blog.andywaite.com">blog.andywaite.com</a></li>
<li><a href="http://twitter.com/andyw8">twitter.com/andyw8</a></li>
<li><a href="http://stackoverflow.com/users/119822/andy-waite">StackOverflow profile</a></li>
<li><a href="http://github.com/andyw8">github.com/andyw8</a></li>
<li><a href="http://linkedin.andywaite.com">LinkedIn</a></li>
</ul>


<h2>The Details</h2>

<p>The duration of each position might be anywhere from one day to a week. I&#8217;m happy to work with people of different skill levels during each visit.</p>

<p>I&#8217;ll be starting off in North America and I have the following cities in my plan for November and December (dates and order to be confirmed).</p>

<ul>
<li>New York City</li>
<li>Boston</li>
<li>Miami (for <a href="http://rubyconf.org/">RubyConf</a>)</li>
<li>Chicago</li>
<li>Seattle / Portland</li>
<li>Atlanta</li>
<li>Dallas / Austin</li>
<li>San Francisco</li>
<li>Toronto</li>
</ul>


<p>I then plan to be in Asia in January-February and in Europe by March.</p>

<h2>Want To Get Involved?</h2>

<p>If you work at development company in one the above cities, and you are interested in having me visit during November or December, then please drop me an email at <strong><a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#x74;&#x6f;&#x75;&#x72;&#64;&#97;&#110;&#100;&#121;&#x77;&#x61;&#x69;&#116;&#x65;&#x2e;&#x63;&#x6f;&#x6d;">&#x74;&#111;&#117;&#x72;&#x40;&#97;&#x6e;&#x64;&#x79;&#x77;&#x61;&#105;&#116;&#x65;&#x2e;&#99;&#111;&#109;</a></strong>. I can organise my own accomodation and I&#8217;m not looking for any payment, but I wouldn&#8217;t say no to some post-work food or beers!</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2013/09/14/coding-world-tour/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Minimal Rakefile for RSpec, Cucumber and Jasmine]]></title>
<link href="http://andyw8.github.com/2013/02/28/rakefile-cucumber-rspec-jasmine/"/>
<updated>2013-02-28T12:30:00+00:00</updated>
<id>http://andyw8.github.com/2013/02/28/rakefile-cucumber-rspec-jasmine</id>

      <content type="html"><![CDATA[<p>I found I was repeatedly Googling for the Rakefile configuration to run various kinds of tests, so for my own reference, and hopefully someone else&#8217;s, here&#8217;s an example:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;cucumber/rake/task&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;guard/jasmine/task&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">Cucumber</span><span class="o">::</span><span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">Guard</span><span class="o">::</span><span class="no">JasmineTask</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:spec</span><span class="p">,</span> <span class="ss">:cucumber</span><span class="p">,</span> <span class="s1">&#39;guard:jasmine&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you&#8217;ll need the <a href="" title="https://github.com/netzpirat/guard-jasmine">guard-jasmine</a> gem for the Jasmine task.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2013/02/28/rakefile-cucumber-rspec-jasmine/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Playing with (RSpec)-Fire]]></title>
<link href="http://andyw8.github.com/2013/02/21/playing-with-rspec-fire/"/>
<updated>2013-02-21T22:07:00+00:00</updated>
<id>http://andyw8.github.com/2013/02/21/playing-with-rspec-fire</id>

      <content type="html"><![CDATA[<p>I&#8217;ve heard <a href="https://github.com/xaviershay/rspec-fire">rspec-fire</a> mentioned in a few talks by <a href="https://twitter.com/garybernhardt">Gary Bernhardt</a> as a way to keep test doubles in sync with their real classes. This prevents the risk of all the isolated tests passing but the actual app being broken, which is a common concern when doing <a href="http://www.growing-object-oriented-software.com/">GOOS</a>-style testing where all the collaborators are replaced by test doubles.</p>

<p>Paraphrasing from the rspec-fire README:</p>

<blockquote><p>rspec-fire only checks that the methods exist if the doubled class has already been loaded. No checking will happen when running the spec in isolation, but when run in the context of the full app (either as a full spec run or by explicitly preloading collaborators on the command line) a failure will be triggered if an invalid method is being stubbed.</p></blockquote>

<p>It took me a little time to get my head around how rspec-fire works, so I&#8217;ve written up a slightly extended example here.</p>

<p>I followed the instructions in the README and found <a href="http://stackoverflow.com/questions/15009603/rspec-fire-specs-passing-when-they-shouldnt/15010004#15010004">a small problem</a>, but within minutes <a href="https://twitter.com/myronmarston">@myronmarston</a> had fixed it.</p>

<p>Let&#8217;s start with the class that we want to test. The example in the rspec-fire README inherits from <code>Struct</code> to keep things concise, but for clarity let&#8217;s make it a normal class:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@notifier</span> <span class="o">=</span> <span class="n">notifier</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">suspend!</span>
</span><span class='line'>    <span class="vi">@notifier</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;suspended as&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can check out my code at <a href="https://github.com/andyw8/try-rspec-fire">https://github.com/andyw8/try-rspec-fire</a>.</p>

<p>Here&#8217;s what the spec for this class would look like, just using RSpec&#8217;s built-in support for test doubles:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span><span class="p">,</span> <span class="s1">&#39;#suspend!&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;sends a notification&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">notifier</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s2">&quot;EmailNotifier&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">notifier</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:notify</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s2">&quot;suspended as&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">suspend!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Keep in mind that in RSpec, <code>mock</code> and <code>stub</code> are simply aliases for <code>double</code>)</p>

<p>Our <code>EmailNotifier</code> would look like this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EmailNotifier</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>rspec spec/user_spec.rb</code> and this should pass.</p>

<p>Now let&#8217;s say the requirements change. We want to add an option to specify whether the notification should be in plain text or html. The spec becomes:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span><span class="p">,</span> <span class="s1">&#39;#suspend!&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;sends a notification in the appropriate format&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">notifier</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s2">&quot;EmailNotifier&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">format</span> <span class="o">=</span> <span class="n">stub</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">notifier</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:notify</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s2">&quot;suspended as&quot;</span><span class="p">,</span> <span class="nb">format</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">suspend!</span><span class="p">(</span><span class="nb">format</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make this spec pass, we change the user class so that <code>#suspend!</code> takes a <code>format</code> parameter:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@notifier</span> <span class="o">=</span> <span class="n">notifier</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">suspend!</span><span class="p">(</span><span class="nb">format</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@notifier</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;suspended as&quot;</span><span class="p">,</span> <span class="nb">format</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The spec now passes. However, if we tried to use this in a real app it would be broken, because we haven&#8217;t updated our <code>EmailNotifier</code> class.</p>

<p>This is the problem that spec-fire solves.</p>

<p>We first need to add a few lines to <code>spec_helper.rb</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/fire&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span><span class="p">(</span><span class="no">RSpec</span><span class="o">::</span><span class="no">Fire</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we need one small change to the spec, changing <code>double("EmailNotifier")</code> to <code>fire_double("EmailNotifier")</code>.</p>

<p>We then re-run the spec, but this time we preload the collaborator:</p>

<pre><code>$ rspec -I lib -r email_notifier.rb spec/user_spec.rb
</code></pre>

<p>That command looks slightly cryptic. Let&#8217;s check what the RSpec docs say:</p>

<pre><code>Usage: rspec [options] [files or directories]

    -I PATH                          Specify PATH to add to $LOAD_PATH (may be used more than once).
    -r, --require PATH               Require a file.

User#suspend!
  sends a notification (FAILED - 1)
</code></pre>

<p>We&#8217;re telling RSpec to require the real <code>EmailNotifier</code> class. When we call <code>fire_double</code>, it sees that the real class is loaded, uses that instead of the test double, and so triggers a failure:</p>

<pre><code>1) User#suspend! sends a notification in html
   Failure/Error: notifier.should_receive(:notify).with("suspended as", :html)
     Wrong number of arguments for notify. Expected 1, got 2.
   # ./spec/user_spec.rb:9:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Let&#8217;s fix <code>EmailNotifier</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EmailNotifier</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="nb">format</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the specs will now pass when testing against the real <code>EmailNotifier</code>.</p>

<p>So why does this all matter?</p>

<p>When all the unit tests are passing, but the actual app is still broken, a common reaction is to add more integration and system tests as a &#8216;safety-net&#8217;. But these kind of tests tend to be brittle and slow to run.</p>

<p>We need both kinds of tests, but the vast majority of our test suite should be isolated unit tests.</p>

<p>In his talk <a href="http://pyvideo.org/video/631/fast-test-slow-test">Fast Test, Slow Test</a>, Gary Bernhardt suggests aiming for a ratio of 90/10 between unit and system tests, approaching 95/5 or even 99/1 as time goes on.</p>

<p>rspec-fire gives you greater confidence that the isolated tests&#8217; boundaries line up with the real system.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2013/02/21/playing-with-rspec-fire/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Exploring Concerns for Rails 4]]></title>
<link href="http://andyw8.github.com/2012/12/23/exploring-concerns-for-rails-4/"/>
<updated>2012-12-23T17:54:00+00:00</updated>
<id>http://andyw8.github.com/2012/12/23/exploring-concerns-for-rails-4</id>

      <content type="html"><![CDATA[<p>A <a href="http://railscasts.com/episodes/398-service-objects">recent episode</a> of Railscasts Pro covered two approaches to splitting up a large Rails model – <strong>Concerns</strong> and <strong>Service Objects</strong>.</p>

<p>Concerns are supported by Rails 3 but will become more &#8216;official&#8217; in Rails 4. There&#8217;s some controversy about whether Concerns or Service Objects are the best approach. DHH is pushing Concerns but OO proponents tend to prefer Service Objects. I believe that both have their place and can be used together.</p>

<h2>An Example</h2>

<p>I began by looking at one of my ActiveRecord model classes to see what it made sense to extract. Initially I created seperate concerns for validations, assocations, and accessors, e.g.:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/trader.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Trader</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Accessors</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Validations</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Associations</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I then realised this was probably a bad idea:</p>

<ul>
<li>If I add new behaviour to Trader then I&#8217;d probably need to change more than one of these concerns.</li>
<li>It&#8217;s unlikely I&#8217;d be able to re-use any of those concerns for another model.</li>
</ul>


<p>So instead, I tried to group the code into &#8216;topics&#8217; and came up with the following:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/trader.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Trader</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">BasicInfo</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">FriendlyURL</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Location</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">OpeningHours</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Schedule</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Permissions</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In general, I believe a concern should be named after a domain concept (which I think is true for all of the above, except perhaps FriendlyURL).</p>

<p>Let&#8217;s look at the Schedule concern as an example:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/concerns/trader/schedule.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Trader</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Schedule</span>
</span><span class='line'>    <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">attr_accessible</span> <span class="ss">:market_days_ids</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">has_many</span> <span class="ss">:appearances</span>
</span><span class='line'>      <span class="n">has_many</span> <span class="ss">:market_days</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:appearances</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open?</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">closed?</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown, it can include a mix of validations, accessibilty, associations, as well as the plain methods. This is a much better way of grouping related functionality.</p>

<h2>Sharing Concerns</h2>

<p>One thing that wasn&#8217;t clear from the documentation and other articles I&#8217;ve seen is how a concern can be shared amongst multiple models. Let&#8217;s say you have two concerns with the same name:</p>

<ul>
<li>app/models/concerns/schedule.rb</li>
<li>app/models/concerns/trader/schedule.rb</li>
</ul>


<p>and the following model:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/trader.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Trader</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Schedule</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the concern in <code>app/models/concerns/trader/schedule.rb</code> would be used, and the other ignored.</p>

<p>However, if that concern was removed, the model would pick up the other concern. So a model will search in it&#8217;s own <code>concerns</code> directory first, and if the concern isn&#8217;t found there, it will look in the top-level concerns directory.</p>

<p>If you prefer a more explicit way of indicating a shared concern, you can namespace it:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/trader.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Trader</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Shared</span><span class="o">::</span><span class="no">Schedule</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/models/concerns/shared/schedule.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Shared::Schedule</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope you find this useful.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2012/12/23/exploring-concerns-for-rails-4/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Using Zeus with Cucumber and Guard]]></title>
<link href="http://andyw8.github.com/2012/12/05/zeus-cucumber-guard/"/>
<updated>2012-12-05T14:13:00+00:00</updated>
<id>http://andyw8.github.com/2012/12/05/zeus-cucumber-guard</id>

      <content type="html"><![CDATA[<p><a href="https://github.com/burke/zeus">Zeus</a> is rapidly overtaking <a href="https://github.com/sporkrb/spork">Spork</a> as the tool of choice to speed up running Cucumber integration tests against Rails apps.</p>

<p>I wanted to use Zeus alongside <a href="https://github.com/guard/guard">Guard</a> to provide a rapid feedback cycle when doing BDD. This ended up being quite fiddly to get working, and it seems not many people are doing this yet, so here I will describe my configuration.</p>

<p>These instructions are for Mac OS X 10.8. On other platforms you&#8217;ll probably need to pick different gems for notifications and filesystems events.</p>

<h2>Gemfile</h2>

<p>Zeus seems to be picky about which groups it loads gems from, depending on what command you&#8217;re running. The configuration below works for me, but may not be optimal:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># just an extract</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.5.4&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-cucumber&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.2.2&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.3.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.9.2&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.12.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.12.0&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara-webkit&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.7.1&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.1.0&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;terminal-notifier-guard&#39;</span> <span class="c1"># Mac OS X 10.8 only</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;zeus&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.12.0&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve specified versions to show which combination worked for me. As some of these gems need to interact closely with each other, you need to be careful when upgrading in order to keep them &#8216;in sync&#8217;.</p>

<p>Note that the Zeus gem is listed in the <code>:test</code> group, even though I&#8217;m not running Zeus through Bundler. I&#8217;m not entirely sure why it has to be here, but I get an error <em>zeus is not part of the bundle</em> when it&#8217;s not present.</p>

<h2>Guardfile</h2>

<p>My Guardfile is fairly standard. <a href="https://github.com/guard/guard-rspec">guard-rspec</a> already has support for Zeus, so all I had to do was enable <code>zeus</code> and disable <code>bundler</code>:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">guard</span> <span class="s1">&#39;rspec&#39;</span><span class="p">,</span> <span class="n">zeus</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">bundler</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/guard/guard-cucumber">guard-cucumber</a> doesn&#8217;t have built-in support for Zeus, but the <code>command_prefix</code> setting can be used instead:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">guard</span> <span class="s1">&#39;cucumber&#39;</span><span class="p">,</span> <span class="n">command_prefix</span><span class="p">:</span> <span class="s1">&#39;zeus&#39;</span><span class="p">,</span> <span class="n">bundler</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Booting Up</h2>

<p>Start Zeus without using Bunder:</p>

<pre><code>$ zeus start
</code></pre>

<p>Then start Guard via Bundler:</p>

<pre><code>$ bundle exec guard
</code></pre>

<p>Now you can start building!</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2012/12/05/zeus-cucumber-guard/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[TDD Triangulation Practice]]></title>
<link href="http://andyw8.github.com/2012/08/22/tdd-triangulation-practice/"/>
<updated>2012-08-22T13:50:00+01:00</updated>
<id>http://andyw8.github.com/2012/08/22/tdd-triangulation-practice</id>

      <content type="html"><![CDATA[<p>After attending <a href="http://www.codemanship.co.uk/tddworkshop.html">Jason Goreman&#8217;s Intensive TDD workshop</a>, I decided to have some practice at the triangulation aspect of Test-Driven Development. I strictly kept to the TDD mantra of:</p>

<ul>
<li><strong>Red</strong>: Write a failing test</li>
<li><strong>Green</strong>: Make the test pass with the simplest implementation possible</li>
<li><strong>Refactor</strong>: Remove duplication or improve the design</li>
<li><strong>Repeat</strong></li>
</ul>


<p>I based my effort on the <a href="http://koans.heroku.com/about_scoring_project">Scoring Project</a> from RubyKoans. This already includes some tests but I wrote mine from scratch.</p>

<p>To recap the rules:</p>

<ol>
<li>A set of three ones is 1000 points</li>
<li>A set of three numbers (other than ones) is worth 100 times the number. (e.g. three fives is 500 points).</li>
<li>A one (that is not part of a set of three) is worth 100 points.</li>
<li>A five (that is not part of a set of three) is worth 50 points.</li>
<li>Everything else is worth 0 points.</li>
</ol>


<p>I started with what seemed like the simplest test possible:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;#score&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;is 0 for an empty list&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">score</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s make it green:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, how do you decide what test to write next? It seems that rules 3 and 4 are dependent on rules 1 and 2, so let&#8217;s postpone those for later and write a failing test for rule 1:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is 1000 for a set of three ones&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">score</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">1000</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sticking the rule of only writing the minimum code needed to pass the test:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">dice</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="mi">1000</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A confession here: This is how I initially approached the problem, but I found I got stuck at a &#8216;deadlock&#8217; position where it wasn&#8217;t possible to make progress with small, simple refactorings. Looking at the set of rules from a distance, we can see this the end result is an accumulation of the scores from each rule. Therefore, having a series of branches for alternative conditions probably isn&#8217;t going to work.</p>

<p>Let&#8217;s refactor the code to this to give a better base to build upon:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write another failing test for rule 1:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">it</span> <span class="s2">&quot;is 1000 for a set including three ones&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">score</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">1000</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make it green:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">||</span> <span class="n">dice</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point we can see duplication starting to appear, so it&#8217;s time to refactor and generalise the solution:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s write a failing test for rule 2:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is 600 for a set of three sixes&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">score</span><span class="p">(</span><span class="o">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">600</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make it green:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">600</span> <span class="k">if</span> <span class="n">dice</span> <span class="o">==</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write another failing test for rule 2:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is 600 for a set including three sixes&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">score</span><span class="p">(</span><span class="o">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">=</span> <span class="mi">600</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make it green:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">600</span> <span class="k">if</span> <span class="n">dice</span> <span class="o">==</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span> <span class="o">||</span> <span class="n">dice</span> <span class="o">==</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refactor to remove duplication:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">600</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write another failing test for rule 2:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is 200 for a set including three twos&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">score</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make it green:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">600</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">200</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see some duplication creeping in - we would need five lines to cover three twos up to three sixes, so let&#8217;s refactor to generalise:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to consider the case of more than three of the same value:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is 200 for a set including three twos&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">score</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simple change makes this green:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s add a failing test for Rule 3:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is 100 for a one (that is not part of a set of three)&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">score</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make it green:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">score</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And another failing test for Rule 3:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is 200 for two ones (that are not part of a set of three)&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">score</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make it green:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">score</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">200</span> <span class="k">if</span> <span class="n">score</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another failing test:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is 200 for a set including two ones (that are not part of a set of three)&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">score</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make it green:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">score</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">200</span> <span class="k">if</span> <span class="n">score</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">200</span> <span class="k">if</span> <span class="n">score</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refactor and generalise:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">1000</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which can be further improved:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">dice</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="k">next</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1000</span> <span class="p">:</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write a failing test for rule 4:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is 100 for a set including two fives (that are not part of a set of three)&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">score</span><span class="p">(</span><span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make it green:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">dice</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="k">next</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1000</span> <span class="p">:</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">50</span> <span class="o">*</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s consider the slightly tricker case of interdependent rules:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is 550 for a set including three fives along with a single five&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">score</span><span class="p">(</span><span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">550</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The current implementation will give an incorrect answer of 700 because it&#8217;s counting the fives as a triple and then counting them again as single fives. We need to make sure they aren&#8217;t counted twice.</p>

<p>A simple way of doing that is to sort the array and then drop the first 3 values of the array:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">dice</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">dice</span><span class="o">.</span><span class="n">sort!</span>
</span><span class='line'>  <span class="n">dice</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="k">next</span> <span class="k">if</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1000</span> <span class="p">:</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">dice</span> <span class="o">=</span> <span class="n">dice</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">+=</span> <span class="mi">50</span> <span class="o">*</span> <span class="n">dice</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m happy with that final solution, and it also passes the RubyKoans tests.</p>

<h2>What I Learned</h2>

<p>Triangulation is a useful technique but doesn&#8217;t bypass the need for the analysis and thinking required to solve tricky problems. If you try to do it on &#8216;autopilot&#8217; you probably won&#8217;t succeed. The order you choose to write the tests, and the code you write early on can have a significant impact in how much effort is required discover to the algorithm.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2012/08/22/tdd-triangulation-practice/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Cucumber, BDD and London 2012]]></title>
<link href="http://andyw8.github.com/2012/08/20/cucumber-bdd-london-2012/"/>
<updated>2012-08-20T19:54:00+01:00</updated>
<id>http://andyw8.github.com/2012/08/20/cucumber-bdd-london-2012</id>

      <content type="html"><![CDATA[<p>I recently finished a contract with BBC Future Media working on the <a href="http://www.bbc.co.uk/sport/0/olympics/2012/">London 2012 Olympics coverage</a>. I was part of the <a href="http://www.bbc.co.uk/blogs/bbcinternet/2012/03/sport_olympic_service_update.html">Sport Olympic Service team</a> which published pages for each athlete, country, discipline, event and venue as well as the medal tables.</p>

<p>My role was as a Developer-in-Test, in which I used my coding background to help build quality into the end product using techniques such as Specification by Example, Continuous Integration and Behaviour-Driven Development.</p>

<p>This post describes how we made use of Ruby, Cucumber and some other tools in our approach. (I have simplified some aspects for the sake of readability and conciseness).</p>

<h2>Architecture Overview</h2>

<p>The BBC Forge platform uses PHP and Zend at the front-end and connects to a number of back-end services over HTTP. For the Olympics coverage, some data would provided by a third-party as a REST API serving XML responses.</p>

<p>A major challenge was that the third-party APIs had not yet been built. We were given examples of what to expect in the responses but our development would have to be done in parallel with the third-party&#8217;s own development.</p>

<h2>Requirements Analysis</h2>

<p>We wrote specifications using the Gherkin format, keeping in mind <a href="http://www.amazon.co.uk/gp/product/0321205685">Mike Cohn&#8217;s INVEST guidelines</a> which say stories should be:</p>

<ul>
<li>Independent</li>
<li>Negotiable</li>
<li>Valuable</li>
<li>Estimable</li>
<li>Small</li>
<li>Testable</li>
</ul>


<p>As an example, consider the story for the <a href="http://www.bbc.co.uk/sport/olympics/2012/medals/countries">medals table</a>. There are <a href="http://en.wikipedia.org/wiki/Olympic_medal_table">very particular rules</a> for the correct order to list the countries in the medals table. Working with developers and business analysts, we came up with the following acceptance criteria:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Gherkin'><span class='line'><span class="k">Feature:</span><span class="nf"> Medals Table</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  Countries are ranked by the number of golds, silvers,</span>
</span><span class='line'><span class="nf">  then bronzes, followed by their official IOC code.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> No medals</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">no medals have been awarded</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I view the medals table</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">a placeholder message should be present</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Different number of gold</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">the medals:</span>
</span><span class='line'><span class="k">      |</span><span class="s"> country</span><span class="k">       |</span><span class="s"> gold</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> United States</span><span class="k"> |</span><span class="s"> 3</span><span class="k">    |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> China</span><span class="k">         |</span><span class="s"> 1</span><span class="k">    |     </span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> Great Britain</span><span class="k"> |</span><span class="s"> 2</span><span class="k">    |</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I view the medals table</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">the ranking should be United States, Great Britain, China</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Same number of gold but different number of silver</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">the medals:</span>
</span><span class='line'><span class="k">      |</span><span class="s"> country</span><span class="k">       |</span><span class="s"> gold</span><span class="k"> |</span><span class="s"> silver</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> United States</span><span class="k"> |</span><span class="s"> 2</span><span class="k">    |</span><span class="s"> 3</span><span class="k">      |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> China</span><span class="k">         |</span><span class="s"> 2</span><span class="k">    |</span><span class="s"> 1</span><span class="k">      |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> Great Britain</span><span class="k"> |</span><span class="s"> 2</span><span class="k">    |</span><span class="s"> 2</span><span class="k">      |</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I view the medals table</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">the ranking should be United States, Great Britain, China</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Same number of gold and silver but different number of bronze</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">the medals:</span>
</span><span class='line'><span class="k">      |</span><span class="s"> country</span><span class="k">       |</span><span class="s"> gold</span><span class="k"> |</span><span class="s"> silver</span><span class="k"> |</span><span class="s"> bronze</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> United States</span><span class="k"> |</span><span class="s"> 2</span><span class="k">    |</span><span class="s"> 2</span><span class="k">      |</span><span class="s"> 3</span><span class="k">      |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> China</span><span class="k">         |</span><span class="s"> 2</span><span class="k">    |</span><span class="s"> 2</span><span class="k">      |</span><span class="s"> 1</span><span class="k">      |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> Great Britain</span><span class="k"> |</span><span class="s"> 2</span><span class="k">    |</span><span class="s"> 2</span><span class="k">      |</span><span class="s"> 2</span><span class="k">      |</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I view the medals table</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">the ranking should be United States, Great Britain, China</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Same number of gold, silver and bronze</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">the United States, China and Great Britain have equal gold, silver and bronze </span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I view the medals table</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">the ranking should be China, Great Britain, United States</span>
</span></code></pre></td></tr></table></div></figure>


<p>(The <a href="http://en.wikipedia.org/wiki/List_of_IOC_country_codes">IOC code</a> is a three-letter acronym such as USA or GBR)</p>

<p>Our data provider supplied examples of the XML format which looked something like this:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;countries&gt;</span>
</span><span class='line'>  <span class="nt">&lt;country</span> <span class="na">name=</span><span class="s">&quot;United States&quot;</span> <span class="na">code=</span><span class="s">&quot;USA&quot;</span> <span class="na">gold=</span><span class="s">&quot;1&quot;</span> <span class="na">silver=</span><span class="s">&quot;2&quot;</span> <span class="na">bronze=</span><span class="s">&quot;3&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;country</span> <span class="na">name=</span><span class="s">&quot;Great Britain&quot;</span> <span class="na">code=</span><span class="s">&quot;GBR&quot;</span> <span class="na">gold=</span><span class="s">&quot;1&quot;</span> <span class="na">silver=</span><span class="s">&quot;2&quot;</span> <span class="na">bronze=</span><span class="s">&quot;3&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/countries&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So in order to test all five scenarios above, a different XML fixture would be needed for each one. Creating these by hand would be time-consuming, and most of the feeds were more complex than this example. Additionally, the XML structure was subject to change, which would also add to the maintenance burden.</p>

<p>So to automate this, I built a template with placeholders which could be populated with the appropriate data for each scenario.</p>

<p>I chose to use the <a href="http://liquidmarkup.org/">Liquid</a> templating library as the curly braces stand out from the surrounding XML, but there are numerous other viable choices. Converted into a Liquid template, the XML example above would look something like:</p>

<div><script src='https://gist.github.com/3433069.js?file=template.liquid.xml'></script>
<noscript><pre><code>&lt;countries&gt;
  {% for country in countries %}
  &lt;country name=&quot;{{ country.name }}&quot; code=&quot;{{ country.code }}&quot; gold=&quot;{{ country.gold }}&quot; silver=&quot;{{ country.silver }}&quot; bronze=&quot;{{ country.bronze }}&quot; /&gt;
  {% endfor %}
&lt;/countries&gt;</code></pre></noscript></div>


<p>So then, the required fixtures could be generated using code such as:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">template</span><span class="p">)</span><span class="o">.</span><span class="n">render</span> <span class="s1">&#39;countries&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">code</span><span class="p">:</span> <span class="s1">&#39;USA&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">gold</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">silver</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">bronze</span><span class="p">:</span> <span class="mi">3</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Great Britain&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">code</span><span class="p">:</span> <span class="s1">&#39;GBR&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">gold</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">silver</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">bronze</span><span class="p">:</span> <span class="mi">3</span> <span class="p">}</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next challenge was how to run tests against these fixtures. As the site isn&#8217;t built in Ruby, stubbing the HTTP classes wasn&#8217;t an option. Instead, I used <a href="http://artemave.github.com/2012/05/27/stub-like-a-surgeon-spy-like-james-bond-with-rest-assured/">REST-Assured</a>, a highly-useful testing tool built by another BBC contractor <a href="http://artemave.github.com/">Artem Avetisyan</a>.</p>

<p>REST-Assured has a simple API which defines that a particular query string should give a specified response:</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^there no medals have been awarded &quot;([^&quot;])*&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">query</span><span class="o">|</span>
</span><span class='line'>  <span class="n">xml</span> <span class="o">=</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">template</span><span class="p">)</span><span class="o">.</span><span class="n">render</span> <span class="s1">&#39;countries&#39;</span> <span class="o">=&gt;</span> <span class="o">[]</span>
</span><span class='line'>  <span class="no">RestAssured</span><span class="o">::</span><span class="no">Double</span><span class="o">.</span><span class="n">create</span> <span class="n">fullpath</span><span class="p">:</span> <span class="s2">&quot;/medals&quot;</span><span class="p">,</span> <span class="n">content</span><span class="p">:</span> <span class="n">xml</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We ran REST-Assured on Heroku for convenience. For the testing environment, we added a hook so that a the API endpoint configuration could be overridden using a query string parameter, e.g. http://test.bbc.co.uk/olympics/medals?host=bbc382981.herokuapp.com</p>

<p>These Cucumber scenarios formed part of our continous integration builds running on Hudson, helping to make the BBC&#8217;s London 2012 coverage <a href="http://www.bbc.co.uk/blogs/bbcinternet/2012/08/digital_olympics_reach_stream_stats.html">a great success</a>.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2012/08/20/cucumber-bdd-london-2012/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[How to easily delete a large Amazon S3 Bucket]]></title>
<link href="http://andyw8.github.com/2012/08/08/how-to-easily-delete-a-large-amazon-s3-bucket/"/>
<updated>2012-08-08T14:32:00+01:00</updated>
<id>http://andyw8.github.com/2012/08/08/how-to-easily-delete-a-large-amazon-s3-bucket</id>

      <content type="html"><![CDATA[<p>I recently had to delete an S3 bucket containing over 200,000 objects. S3 prevents deletion of non-empty buckets, and deleting this many objects is virtually impossible using any GUI. I looked into an API-based approach but support for <a href="http://aws.amazon.com/about-aws/whats-new/2011/12/07/amazon-s3-announces-multi-object-delete/">multi-object delete</a> still seems limited.</p>

<p>If you don&#8217;t mind waiting 24 hours for your bucket to be cleared, there&#8217;s a very simple solution using S3&#8217;s lifecycle feature:</p>

<ul>
<li>Log into the <a href="https://console.aws.amazon.com/s3/home">S3 Management Console</a></li>
<li>Select the bucket you want to clear</li>
<li>Select Properties from the toolbar</li>
<li>Click the Lifecycle tab in the Properties panel</li>
<li>Add a rule with no prefix and expiration of 1 day</li>
<li>Save the rule</li>
</ul>


<p>Check back 24 hours later you&#8217;ll find all your objects have been deleted.</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2012/08/08/how-to-easily-delete-a-large-amazon-s3-bucket/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[RubyMotion App Template]]></title>
<link href="http://andyw8.github.com/2012/05/28/rubymotion-app-template/"/>
<updated>2012-05-28T22:17:00+01:00</updated>
<id>http://andyw8.github.com/2012/05/28/rubymotion-app-template</id>

      <content type="html"><![CDATA[<p>I&#8217;ve been trying out <a href="http://www.rubymotion.com/">RubyMotion</a> lately, and I&#8217;ve created a simple template project with some sensible defaults to make it quick and easy to start a new app:</p>

<ul>
<li>Folders for models, views, controllers and vendored frameworks to encourage a Rails-esque layout convention</li>
<li>Spec folder layout to mirror the app folder</li>
<li>Support for <a href="http://www.rubymotion.com/developer-center/articles/testflight/">TestFlight</a></li>
<li>Support for <a href="http://www.rubymotion.com/developer-center/articles/cocoapods/">CocoaPods</a></li>
<li>Default values for app version and identifier</li>
<li>Placeholders for configuring icons and device families</li>
</ul>


<p>You can find it at <a href="https://github.com/andyw8/rubymotion_app_template">github.com/andyw8/rubymotion_app_template</a></p>
<p><a rel="bookmark" href="http://andyw8.github.com/2012/05/28/rubymotion-app-template/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[First Post With Octopress]]></title>
<link href="http://andyw8.github.com/2012/04/18/first-post-with-octopress/"/>
<updated>2012-04-18T23:37:00+01:00</updated>
<id>http://andyw8.github.com/2012/04/18/first-post-with-octopress</id>

      <content type="html"><![CDATA[<p>Hello world!</p>
<p><a rel="bookmark" href="http://andyw8.github.com/2012/04/18/first-post-with-octopress/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
</feed>
